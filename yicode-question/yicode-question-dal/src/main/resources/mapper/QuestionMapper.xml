<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yixihan.yicode.question.dal.mapper.question.QuestionMapper">

    <sql id="userAnswer">
        select
        `question_id`
        from
        `question_answer`
        <where>
            and `user_id` = #{params.userId}
            and `del_flag` = 0
            <if test="params.status != null and params.status != '' and params.status != 'UN_DO'">
                <if test="params.status == 'UN_ACCESS'">
                    and `answer_flag` != 'AC'
                    and question_id not in (
                        select
                            question_id
                        from
                            question_answer
                        where
                            del_flag = 0
                            and user_id = #{params.userId}
                            and answer_flag = 'AC'
                    )
                </if>
                <if test="params.status == 'ACCESS'">
                    and `answer_flag` = 'AC'
                </if>
            </if>
        </where>
    </sql>

    <select id="queryQuestion"
            resultType="com.yixihan.yicode.question.api.dto.response.question.QuestionDtoResult">
    select
        q.`question_id`,
        any_value(q.`question_name`)                                                       as questionName,
        any_value(q.`question_difficulty`)                                                 as questionDifficulty,
        any_value(q.`like_count`)                                                          as likeCount,
        any_value(q.`comment_count`)                                                       as commentCount,
        any_value(q.`note_count`)                                                          as noteCount,
        any_value(q.`commit_count`)                                                        as commitCount,
        any_value(q.`success_count`)                                                       as successCount,
        any_value(q.`enable`)                                                              as enable,
        if(q.`success_count` = 0, 0, round(q.`success_count` / q.`commit_count`, 4) * 100) as passRate,
        <if test="params.userId != null">
            if(qa.`status` > 0, true, false)                                               as `status`,
        </if>
        any_value(q.`create_time`)                                                         as create_time
    from
        `question` q
    <if test="params.label != null and params.label.size () > 0">
        left join `label_question` lq
            on lq.`del_flag` = 0
                   and q.`question_id` = lq.`question_id`
    </if>
    <if test="params.userId != null">
        left join (
            select
                `question_id`,
                sum(if(`answer_flag`='AC', 1, 0)) as `status`
            from
                `question_answer`
            where
                `del_flag` = 0
                and `user_id` = ${params.userId}
            group by
                `question_id`
            ) as qa
            on qa.`question_id` = q.`question_id`
    </if>
    <where>
        and q.`del_flag` = 0
        <if test="params.enable == null or !params.enable">
            and q.`enable` = 1
        </if>
        <if test="params.questionName != null and params.questionName != ''">
            and q.`question_name` like concat('%', #{params.questionName}, '%')
        </if>
        <if test="params.label != null and params.label.size () > 0">
            <foreach collection="params.label" item="item"
                     open="and lq.`label_id` in (" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="params.difficulty != null and params.difficulty != ''">
            and q.`question_difficulty` = #{params.difficulty}
        </if>
        <if test="params.userId != null and params.status != null and params.status != ''">
            <if test="params.status == 'UN_DO'">
                and q.`question_id` not in (<include refid="userAnswer"/>)
            </if>
            <if test="params.status == 'UN_ACCESS' or params.status == 'ACCESS'">
                and q.`question_id` in (<include refid="userAnswer"/>)
            </if>
        </if>
    </where>
    group by q.`question_id`
    order by
    <choose>
        <when test="params.nameSort != null">
            <if test="params.nameSort">
                questionName desc,
            </if>
            <if test="!params.nameSort">
                questionName,
            </if>
        </when>
        <when test="params.noteSort != null">
            <if test="params.noteSort">
                noteCount desc,
            </if>
            <if test="!params.noteSort">
                noteCount,
            </if>
        </when>
        <when test="params.difficultySort != null">
            <if test="params.difficultySort">
                field (questionDifficulty, 'EASY', 'MEDIUM', 'HARD') desc,
            </if>
            <if test="!params.difficultySort">
                field (questionDifficulty, 'EASY', 'MEDIUM', 'HARD'),
            </if>
        </when>
        <when test="params.passSort != null">
            <if test="params.passSort">
                passRate desc,
            </if>
            <if test="!params.passSort">
                passRate,
            </if>
        </when>
    </choose>
        q.`create_time`
    </select>

    <select id="questionDetail"
            resultType="com.yixihan.yicode.question.api.dto.response.question.QuestionDetailDtoResult">
        select
            q.`question_id`,
            q.`question_name`,
            q.`question_difficulty`,
            q.`like_count`,
            q.`comment_count`,
            q.`note_count`,
            q.`commit_count`,
            q.`success_count`,
            q.`question_desc`,
            if(q.`success_count` = 0, 0, round(q.`success_count` / q.`commit_count`, 4) * 100) as passRate,
            <if test="params.userId != null">
                if(qa.`status` > 0, true, false) as `status`,
            </if>
            q.`create_time`
        from
            `question` q
        <if test="params.userId != null">
            left join (
                select
                    `question_id`,
                    sum(if(`answer_flag`='AC', 1, 0)) as `status`
                from
                    `question_answer`
                where
                    `del_flag` = 0
                    and `user_id` = ${params.userId}
                group by
                    `question_id`
            ) as qa
            on qa.`question_id` = q.`question_id`
        </if>
        <where>
            and q.`del_flag` = 0
            and q.`enable` = 1
            and q.`question_id` = #{params.questionId}
        </where>
    </select>

    <select id="commitData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.CommitDataDtoResult">
        select count(*)                                                                          as commitCount,
               ifnull(sum(if(answer_flag = 'AC', 1, 0)), 0)                                      as commitSuccessCount,
               ifnull(sum(if(q.question_difficulty = 'EASY', 1, 0)), 0)                          as commitEasyCount,
               ifnull(sum(if(q.question_difficulty = 'EASY' and answer_flag = 'AC', 1, 0)),
                      0)                                                                         as commitSuccessEasyCount,
               ifnull(sum(if(q.question_difficulty = 'MEDIUM', 1, 0)), 0)                        as commitMediumCount,
               ifnull(sum(if(q.question_difficulty = 'MEDIUM' and answer_flag = 'AC', 1, 0)),
                      0)                                                                         as commitSuccessMediumCount,
               ifnull(sum(if(q.question_difficulty = 'HARD', 1, 0)), 0)                          as commitHardCount,
               ifnull(sum(if(q.question_difficulty = 'HARD' and answer_flag = 'AC', 1, 0)),
                      0)                                                                         as commitSuccessHardCount
        from
            `question_answer` as qa
        left join
            `question` q on qa.question_id = q.question_id and q.del_flag = 0
        where
            qa.del_flag = 0
            and q.`enable` = 1
            and qa.create_time between #{params.startDate} and #{params.endDate}
    </select>

    <select id="brokenCodeData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as commitCount,
            ifnull(sum(if(answer_flag = 'AC', 1, 0)), 0) as commitSuccessCount
        from
            `question_answer`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')
    </select>

    <select id="brokenCommentRootData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as commentCount
        from
            `comment_root`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')

    </select>
    <select id="brokenCommentReplyData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as commentCount
        from
            `comment_reply`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')
    </select>
    <select id="brokenNoteData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as noteCount
        from
            `note`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')
    </select>

    <select id="brokenUserData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as userCount
        from
            `user`
        where
            del_flag = 0
          and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')

    </select>

    <select id="questionCount"
            resultType="com.yixihan.yicode.question.api.dto.response.question.QuestionCountDtoResult">
        select
            count(*) as question,
            ifnull(sum(if(question_difficulty = 'EASY', 1, 0)), 0)   as easyQuestion,
            ifnull(sum(if(question_difficulty = 'MEDIUM', 1, 0)), 0) as mediumQuestion,
            ifnull(sum(if(question_difficulty = 'HARD', 1, 0)), 0)   as hardQuestion
        from
            question
        where
            del_flag = 0
            and `enable` = 1
    </select>
</mapper>
