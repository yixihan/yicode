<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yixihan.yicode.question.dal.mapper.question.QuestionMapper">

    <sql id="userAnswer">
        select
        `question_id`
        from
        `question_answer`
        <where>
            and `user_id` = #{params.userId}
            and `del_flag` = 0
            <if test="params.status != null and params.status != '' and params.status != 'UN_DO'">
                <if test="params.status != 'UN_ACCESS'">
                    and `answer_flag` != 'AC'
                </if>
                <if test="params.status != 'ACCESS'">
                    and `answer_flag` = 'AC'
                </if>
            </if>
        </where>
    </sql>

    <select id="queryQuestion"
            resultType="com.yixihan.yicode.question.api.dto.response.question.QuestionDtoResult">
    select
        q.`question_id`,
        q.`question_name`,
        q.`question_difficulty`,
        q.`like_count`,
        q.`comment_count`,
        q.`note_count`,
        q.`commit_count`,
        q.`success_count`,
        if(q.`success_count` = 0, 0, q.`success_count` / q.`commit_count` * 100) as passRate,
        q.`create_time`
    from
        `question` q
    <if test="params.label != null and params.label.size () > 0">
        left join `label_question` lq
            on q.`question_id` = lq.`question_id`
    </if>
    <where>
        and q.`del_flag` = 0
        <if test="params.questionName != null and params.questionName != ''">
            and q.`question_name` like concat('%', #{params.questionName}, '%')
        </if>
        <if test="params.label != null and params.label.size () > 0">
            and lq.`del_flag` = 0
            <foreach collection="params.label" item="item"
                     open="and lq.`label_id` in (" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="params.difficulty != null and params.difficulty != ''">
            and q.`question_difficulty` = #{params.difficulty}
        </if>
        <if test="params.status != null and params.status != ''">
            <if test="params.status == 'UN_DO'">
                and q.`question_id` not in (<include refid="userAnswer"/>)
            </if>
            <if test="params.status == 'UN_ACCESS' or params.status == 'ACCESS'">
                and q.`question_id` in (<include refid="userAnswer"/>)
            </if>
        </if>
    </where>
    order by
    <choose>
        <when test="params.nameSort != null">
            <if test="params.nameSort">
                q.`question_name` desc,
            </if>
            <if test="!params.nameSort">
                q.`question_name`,
            </if>
        </when>
        <when test="params.noteSort != null">
            <if test="params.noteSort">
                q.`note_count` desc,
            </if>
            <if test="!params.noteSort">
                q.`note_count`,
            </if>
        </when>
        <when test="params.difficultySort != null">
            <if test="params.difficultySort">
                field (q.`question_difficulty`, 'HARD', 'MEDIUM', 'EASY') desc,
            </if>
            <if test="!params.difficultySort">
                field (q.`question_difficulty`, 'HARD', 'MEDIUM', 'EASY'),
            </if>
        </when>
        <when test="params.passSort != null">
            <if test="params.passSort">
                passRate desc,
            </if>
            <if test="!params.passSort">
                passRate,
            </if>
        </when>
    </choose>
        q.`create_time`
    </select>

    <select id="questionDetail"
            resultType="com.yixihan.yicode.question.api.dto.response.question.QuestionDetailDtoResult">
        select
            q.`question_id`,
            q.`question_name`,
            q.`question_difficulty`,
            q.`like_count`,
            q.`comment_count`,
            q.`note_count`,
            q.`commit_count`,
            q.`success_count`,
            q.`question_desc`,
            if(q.`success_count` = 0, 0, q.`success_count` / q.`commit_count` * 100) as passRate,
            q.`create_time`
        from
            `question` q
        <where>
            and del_flag = 0
            and question_id = #{questionId}
        </where>
    </select>

    <select id="commitData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.CommitDataDtoResult">
        select
            count(*) as commitCount,
            sum(if(answer_flag = 'AC', 1, 0)) as commitSuccessCount,
            sum(if(q.question_difficulty = 'EASY', 1, 0)) as commitEasyCount,
            sum(if(q.question_difficulty = 'EASY' and answer_flag = 'AC', 1, 0)) as commitSuccessEasyCount,
            sum(if(q.question_difficulty = 'MEDIUM', 1, 0)) as commitMediumCount,
            sum(if(q.question_difficulty = 'MEDIUM' and answer_flag = 'AC', 1, 0)) as commitSuccessMediumCount,
            sum(if(q.question_difficulty = 'HARD', 1, 0)) as commitHardCount,
            sum(if(q.question_difficulty = 'HARD' and answer_flag = 'AC', 1, 0)) as commitSuccessHardCount
        from
            `question_answer` as qa
        left join
            `question` q on qa.question_id = q.question_id and q.del_flag = 0
        where
            qa.del_flag = 0
            and qa.create_time between #{params.startDate} and #{params.endDate}
    </select>

    <select id="brokenCodeData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as commitCount,
            sum(if(answer_flag = 'AC', 1, 0)) as commitSuccessCount
        from
            `question_answer`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')
    </select>

    <select id="brokenCommentRootData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as commentCount
        from
            `comment_root`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')

    </select>
    <select id="brokenCommentReplyData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as commentCount
        from
            `comment_reply`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')
    </select>
    <select id="brokenNoteData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as noteCount
        from
            `note`
        where
            del_flag = 0
            and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')
    </select>

    <select id="brokenUserData"
            resultType="com.yixihan.yicode.question.api.dto.response.admin.BrokenDataDtoResult">
        select
            date_format(create_time, '%Y-%m') as month,
            count(*) as userCount
        from
            `user`
        where
            del_flag = 0
          and create_time between #{params.startDate} and #{params.endDate}
        group by
            date_format(create_time, '%Y-%m')

    </select>

    <select id="questionCount"
            resultType="com.yixihan.yicode.question.api.dto.response.question.QuestionCountDtoResult">
        select
            count(*) as question,
            sum(if(question_difficulty = 'EASY', 1, 0)) as easyQuestion,
            sum(if(question_difficulty = 'MEDIUM', 1, 0)) as mediumQuestion,
            sum(if(question_difficulty = 'HARD', 1, 0)) as hardQuestion
        from
            question
        where
            del_flag = 0
    </select>
</mapper>
